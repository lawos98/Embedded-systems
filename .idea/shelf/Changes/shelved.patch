Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	(revision e2f05099d1357fcd59b47d511ee5bff30abf39fb)
+++ /dev/null	(revision e2f05099d1357fcd59b47d511ee5bff30abf39fb)
@@ -1,8 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
-# Editor-based HTTP Client requests
-/httpRequests/
-# Datasource local storage ignored files
-/dataSources/
-/dataSources.local.xml
Index: .gitignore
===================================================================
diff --git a/.gitignore b/.gitignore
deleted file mode 100644
--- a/.gitignore	(revision e2f05099d1357fcd59b47d511ee5bff30abf39fb)
+++ /dev/null	(revision e2f05099d1357fcd59b47d511ee5bff30abf39fb)
@@ -1,5 +0,0 @@
-.pio
-.vscode/.browse.c_cpp.db*
-.vscode/c_cpp_properties.json
-.vscode/launch.json
-.vscode/ipch
Index: .vscode/extensions.json
===================================================================
diff --git a/.vscode/extensions.json b/.vscode/extensions.json
deleted file mode 100644
--- a/.vscode/extensions.json	(revision e2f05099d1357fcd59b47d511ee5bff30abf39fb)
+++ /dev/null	(revision e2f05099d1357fcd59b47d511ee5bff30abf39fb)
@@ -1,10 +0,0 @@
-{
-    // See http://go.microsoft.com/fwlink/?LinkId=827846
-    // for the documentation about the extensions.json format
-    "recommendations": [
-        "platformio.platformio-ide"
-    ],
-    "unwantedRecommendations": [
-        "ms-vscode.cpptools-extension-pack"
-    ]
-}
Index: src/main.cpp
===================================================================
diff --git a/src/main.cpp b/src/main.cpp
deleted file mode 100644
--- a/src/main.cpp	(revision e2f05099d1357fcd59b47d511ee5bff30abf39fb)
+++ /dev/null	(revision e2f05099d1357fcd59b47d511ee5bff30abf39fb)
@@ -1,14 +0,0 @@
-#include <Arduino.h>
-#include "audio/microphone.h"
-
-void setup() {
-  microphoneInit();
-}
-
-void loop() {
-  microphoneRead();
-  digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)
-  delay(1000);                       // wait for a second
-  digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW
-  delay(100);  
-}
\ No newline at end of file
Index: src/audio/microphone.cpp
===================================================================
diff --git a/src/audio/microphone.cpp b/src/audio/microphone.cpp
deleted file mode 100644
--- a/src/audio/microphone.cpp	(revision e2f05099d1357fcd59b47d511ee5bff30abf39fb)
+++ /dev/null	(revision e2f05099d1357fcd59b47d511ee5bff30abf39fb)
@@ -1,80 +0,0 @@
-#include <WiFiNINA.h>
-#include <PDM.h>
-#include "microphone.h"
-
-static const char CHANNELS = 1;
-// Sampling frequency
-static const int FREQUENCY = 16000;
-// Number of PDM samples
-
-// Buffer to read samples into, each sample is 16-bits
-short sampleBuffer[512] = {0};
-
-// Number of audio samples read
-volatile int samplesRead;
-
-// Number of filter coefficients
-const int N = 16;
-
-// Filter coefficients
-float w[N] = {0};
-
-// Input buffer
-float x[N] = {0};
-
-
-// Step size
-const float mu = 0.0000002;
-
-void onPDMdata() {
-  // Query the number of available bytes
-  int bytesAvailable = PDM.available();
-
-  // Read into the sample buffer
-  PDM.read(sampleBuffer, bytesAvailable);
-
-  // 16-bit, 2 bytes per sample
-  samplesRead = bytesAvailable / 2;
-}
-
-void microphoneInit() {
-  while (!Serial){}
-  PDM.onReceive(onPDMdata);
-  PDM.setGain(-20); // Optionally set the gain
-  if (!PDM.begin(CHANNELS, FREQUENCY)) {
-    Serial.println("Failed to start PDM!");
-    while (1);
-  }
-}
-
-void microphoneRead() {
-  if(samplesRead) {  // Wait for samples to be read
-    // Apply LMS noise cancellation
-    for (int i = 0; i < samplesRead; i++) {
-      // Shift input buffer
-      for (int j = N-1; j > 0; j--) {
-        x[j] = x[j-1];
-      }
-      x[0] = sampleBuffer[i];
-      
-      // Calculate output
-      float y = 0;
-      for (int j = 0; j < N; j++) {
-        y += w[j] * x[j];
-      }
-      
-      // Update filter coefficients
-      float e = sampleBuffer[i] - y;
-      for (int j = 0; j < N; j++) {
-        w[j] += mu * e * x[j];
-      }
-      
-      // Apply low-pass filter
-      y = 0.9 * y + 0.1 * sampleBuffer[i];
-      
-      // Write filtered data to serial port
-      Serial.println(y);
-    }
-    samplesRead = 0;
-  }
-}
\ No newline at end of file
Index: src/audio/microphone.h
===================================================================
diff --git a/src/audio/microphone.h b/src/audio/microphone.h
deleted file mode 100644
--- a/src/audio/microphone.h	(revision e2f05099d1357fcd59b47d511ee5bff30abf39fb)
+++ /dev/null	(revision e2f05099d1357fcd59b47d511ee5bff30abf39fb)
@@ -1,3 +0,0 @@
-void onPDMdata();
-void microphoneInit();
-void microphoneRead();
Index: concept/README.md
===================================================================
diff --git a/concept/README.md b/concept/README.md
deleted file mode 100644
--- a/concept/README.md	(revision e2f05099d1357fcd59b47d511ee5bff30abf39fb)
+++ /dev/null	(revision e2f05099d1357fcd59b47d511ee5bff30abf39fb)
@@ -1,13 +0,0 @@
-# Road map
-
-1. Collect Sound.
-2. Sound re-noising.
-4. Create audio visualion matrix.
-
-![AudioVis](AudVis.gif)
-
-5. Collecting the average for each device (bulb / strip
-
-![AudioVis](matrix.png)
-
-7. Sending data to devices via Wi-Fi
Index: src/main/resources/com/visualizer/main.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/visualizer/main.fxml b/src/main/resources/com/visualizer/main.fxml
new file mode 100644
--- /dev/null	(date 1683504039635)
+++ b/src/main/resources/com/visualizer/main.fxml	(date 1683504039635)
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.chart.LineChart?>
+<?import javafx.scene.chart.NumberAxis?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.layout.VBox?>
+
+<VBox xmlns="http://javafx.com/javafx/16" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.visualizer.SampleController">
+    <Label text="Beat:"/>
+    <Label fx:id="beatLabel" />
+    <Label text="Bass:"/>
+    <Label fx:id="bassLabel" />
+    <Label text="Peak:"/>
+    <Label fx:id="peakLabel" />
+
+    <LineChart fx:id="chart" >
+        <xAxis>
+            <NumberAxis label="Sample" />
+        </xAxis>
+        <yAxis>
+            <NumberAxis label="Value" />
+        </yAxis>
+    </LineChart>
+</VBox>
\ No newline at end of file
Index: gradlew.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
--- /dev/null	(date 1683498949671)
+++ b/gradlew.bat	(date 1683498949671)
@@ -0,0 +1,89 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Resolve any "." and ".." in APP_HOME to make it shorter.
+for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
--- /dev/null	(date 1683498949667)
+++ b/gradle/wrapper/gradle-wrapper.properties	(date 1683498949667)
@@ -0,0 +1,5 @@
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.0.2-bin.zip
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
Index: gradlew
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew b/gradlew
new file mode 100755
--- /dev/null	(date 1683498949671)
+++ b/gradlew	(date 1683498949671)
@@ -0,0 +1,234 @@
+#!/bin/sh
+
+#
+# Copyright © 2015-2021 the original authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+##############################################################################
+#
+#   Gradle start up script for POSIX generated by Gradle.
+#
+#   Important for running:
+#
+#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
+#       noncompliant, but you have some other compliant shell such as ksh or
+#       bash, then to run this script, type that shell name before the whole
+#       command line, like:
+#
+#           ksh Gradle
+#
+#       Busybox and similar reduced shells will NOT work, because this script
+#       requires all of these POSIX shell features:
+#         * functions;
+#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
+#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
+#         * compound commands having a testable exit status, especially «case»;
+#         * various built-in commands including «command», «set», and «ulimit».
+#
+#   Important for patching:
+#
+#   (2) This script targets any POSIX shell, so it avoids extensions provided
+#       by Bash, Ksh, etc; in particular arrays are avoided.
+#
+#       The "traditional" practice of packing multiple parameters into a
+#       space-separated string is a well documented source of bugs and security
+#       problems, so this is (mostly) avoided, by progressively accumulating
+#       options in "$@", and eventually passing that to Java.
+#
+#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
+#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
+#       see the in-line comments for details.
+#
+#       There are tweaks for specific operating systems such as AIX, CygWin,
+#       Darwin, MinGW, and NonStop.
+#
+#   (3) This script is generated from the Groovy template
+#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
+#       within the Gradle project.
+#
+#       You can find Gradle at https://github.com/gradle/gradle/.
+#
+##############################################################################
+
+# Attempt to set APP_HOME
+
+# Resolve links: $0 may be a link
+app_path=$0
+
+# Need this for daisy-chained symlinks.
+while
+    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
+    [ -h "$app_path" ]
+do
+    ls=$( ls -ld "$app_path" )
+    link=${ls#*' -> '}
+    case $link in             #(
+      /*)   app_path=$link ;; #(
+      *)    app_path=$APP_HOME$link ;;
+    esac
+done
+
+APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit
+
+APP_NAME="Gradle"
+APP_BASE_NAME=${0##*/}
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD=maximum
+
+warn () {
+    echo "$*"
+} >&2
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+} >&2
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "$( uname )" in                #(
+  CYGWIN* )         cygwin=true  ;; #(
+  Darwin* )         darwin=true  ;; #(
+  MSYS* | MINGW* )  msys=true    ;; #(
+  NONSTOP* )        nonstop=true ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD=$JAVA_HOME/jre/sh/java
+    else
+        JAVACMD=$JAVA_HOME/bin/java
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD=java
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
+    case $MAX_FD in #(
+      max*)
+        MAX_FD=$( ulimit -H -n ) ||
+            warn "Could not query maximum file descriptor limit"
+    esac
+    case $MAX_FD in  #(
+      '' | soft) :;; #(
+      *)
+        ulimit -n "$MAX_FD" ||
+            warn "Could not set maximum file descriptor limit to $MAX_FD"
+    esac
+fi
+
+# Collect all arguments for the java command, stacking in reverse order:
+#   * args from the command line
+#   * the main class name
+#   * -classpath
+#   * -D...appname settings
+#   * --module-path (only if needed)
+#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.
+
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if "$cygwin" || "$msys" ; then
+    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
+    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )
+
+    JAVACMD=$( cygpath --unix "$JAVACMD" )
+
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    for arg do
+        if
+            case $arg in                                #(
+              -*)   false ;;                            # don't mess with options #(
+              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
+                    [ -e "$t" ] ;;                      #(
+              *)    false ;;
+            esac
+        then
+            arg=$( cygpath --path --ignore --mixed "$arg" )
+        fi
+        # Roll the args list around exactly as many times as the number of
+        # args, so each arg winds up back in the position where it started, but
+        # possibly modified.
+        #
+        # NB: a `for` loop captures its iteration list before it begins, so
+        # changing the positional parameters here affects neither the number of
+        # iterations, nor the values presented in `arg`.
+        shift                   # remove old arg
+        set -- "$@" "$arg"      # push replacement arg
+    done
+fi
+
+# Collect all arguments for the java command;
+#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of
+#     shell script including quotes and variable substitutions, so put them in
+#     double quotes to make sure that they get re-expanded; and
+#   * put everything else in single quotes, so that it's not re-expanded.
+
+set -- \
+        "-Dorg.gradle.appname=$APP_BASE_NAME" \
+        -classpath "$CLASSPATH" \
+        org.gradle.wrapper.GradleWrapperMain \
+        "$@"
+
+# Use "xargs" to parse quoted args.
+#
+# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
+#
+# In Bash we could simply go:
+#
+#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
+#   set -- "${ARGS[@]}" "$@"
+#
+# but POSIX shell has neither arrays nor command substitution, so instead we
+# post-process each arg (as a line of input to sed) to backslash-escape any
+# character that might be a shell metacharacter, then use eval to reverse
+# that process (while maintaining the separation between arguments), and wrap
+# the whole thing up as a single "set" statement.
+#
+# This will of course break if any of these variables contains a newline or
+# an unmatched quote.
+#
+
+eval "set -- $(
+        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
+        xargs -n1 |
+        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
+        tr '\n' ' '
+    )" '"$@"'
+
+exec "$JAVACMD" "$@"
Index: settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
--- /dev/null	(date 1683498949667)
+++ b/settings.gradle	(date 1683498949667)
@@ -0,0 +1,1 @@
+rootProject.name = "visualizer"
\ No newline at end of file
Index: src/main/kotlin/com/visualizer/HelloApplication.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/visualizer/HelloApplication.kt b/src/main/kotlin/com/visualizer/HelloApplication.kt
new file mode 100644
--- /dev/null	(date 1683504238189)
+++ b/src/main/kotlin/com/visualizer/HelloApplication.kt	(date 1683504238189)
@@ -0,0 +1,21 @@
+package com.visualizer
+
+import javafx.application.Application
+import javafx.fxml.FXMLLoader
+import javafx.scene.Scene
+import javafx.scene.layout.VBox
+import javafx.stage.Stage
+
+class HelloApplication : Application() {
+    override fun start(primaryStage: Stage) {
+        val loader = FXMLLoader(javaClass.getResource("main.fxml"))
+        val root = loader.load<VBox>()
+        primaryStage.title = "Serial Port Data"
+        primaryStage.scene = Scene(root, 800.0, 600.0)
+        primaryStage.show()
+    }
+}
+
+fun main() {
+    Application.launch(HelloApplication::class.java)
+}
\ No newline at end of file
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
new file mode 100644
--- /dev/null	(date 1683503331912)
+++ b/build.gradle	(date 1683503331912)
@@ -0,0 +1,67 @@
+plugins {
+    id 'java'
+    id 'application'
+    id 'org.jetbrains.kotlin.jvm' version '1.7.10'
+    id 'org.javamodularity.moduleplugin' version '1.8.12'
+    id 'org.openjfx.javafxplugin' version '0.0.13'
+    id 'org.beryx.jlink' version '2.25.0'
+}
+
+group 'com'
+version '1.0-SNAPSHOT'
+
+repositories {
+    mavenCentral()
+}
+
+ext {
+    junitVersion = '5.9.2'
+}
+
+sourceCompatibility = '17'
+targetCompatibility = '17'
+
+tasks.withType(JavaCompile) {
+    options.encoding = 'UTF-8'
+}
+
+application {
+    mainModule = 'com.visualizer'
+    mainClass = 'com.visualizer.HelloApplication'
+}
+
+[compileKotlin, compileTestKotlin].forEach {
+    it.kotlinOptions {
+        jvmTarget = '17'
+    }
+}
+
+javafx {
+    version = '17.0.2'
+    modules = ['javafx.controls', 'javafx.fxml']
+}
+
+dependencies {
+    implementation "org.openjfx:javafx-controls:17"
+    implementation "org.openjfx:javafx-graphics:17"
+    implementation "org.openjfx:javafx-fxml:17"
+    implementation 'com.fazecast:jSerialComm:2.6.2'
+    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
+    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
+}
+
+test {
+    useJUnitPlatform()
+}
+
+jlink {
+    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
+    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
+    launcher {
+        name = 'app'
+    }
+}
+
+jlinkZip {
+    group = 'distribution'
+}
\ No newline at end of file
Index: src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/module-info.java b/src/main/java/module-info.java
new file mode 100644
--- /dev/null	(date 1683504061618)
+++ b/src/main/java/module-info.java	(date 1683504061618)
@@ -0,0 +1,10 @@
+module com.visualizer {
+    requires javafx.controls;
+    requires javafx.fxml;
+    requires kotlin.stdlib;
+    requires com.fazecast.jSerialComm;
+
+
+    opens com.visualizer to javafx.fxml;
+    exports com.visualizer;
+}
\ No newline at end of file
Index: src/main/kotlin/com/visualizer/SampleController.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/visualizer/SampleController.kt b/src/main/kotlin/com/visualizer/SampleController.kt
new file mode 100644
--- /dev/null	(date 1683504443707)
+++ b/src/main/kotlin/com/visualizer/SampleController.kt	(date 1683504443707)
@@ -0,0 +1,88 @@
+package com.visualizer
+
+import com.fazecast.jSerialComm.SerialPort
+import javafx.application.Platform
+import javafx.collections.FXCollections
+import javafx.fxml.FXML
+import javafx.scene.chart.LineChart
+import javafx.scene.chart.XYChart
+import javafx.scene.control.Label
+import java.net.URL
+import java.util.*
+
+class SampleController : javafx.fxml.Initializable {
+    @FXML
+    lateinit var beatLabel: Label
+    @FXML
+    lateinit var bassLabel: Label
+    @FXML
+    lateinit var peakLabel: Label
+    @FXML
+    lateinit var chart: LineChart<Number, Number>
+
+    private val beatData = FXCollections.observableArrayList<XYChart.Data<Number, Number>>()
+    private val bassData = FXCollections.observableArrayList<XYChart.Data<Number, Number>>()
+    private val peakData = FXCollections.observableArrayList<XYChart.Data<Number, Number>>()
+    private var count = 0
+
+    override fun initialize(location: URL?, resources: ResourceBundle?) {
+        chart.xAxis.label = "Sample"
+        chart.yAxis.label = "Value"
+        chart.createSymbols = false
+
+        val beatSeries = XYChart.Series<Number, Number>()
+        beatSeries.name = "Beat"
+        beatSeries.data = beatData
+        chart.data.add(beatSeries)
+
+        val bassSeries = XYChart.Series<Number, Number>()
+        bassSeries.name = "Bass"
+        bassSeries.data = bassData
+        chart.data.add(bassSeries)
+
+        val peakSeries = XYChart.Series<Number, Number>()
+        peakSeries.name = "Peak"
+        peakSeries.data = peakData
+        chart.data.add(peakSeries)
+
+        Thread {
+            val port = SerialPort.getCommPort("/dev/ttyACM0")
+            port.setBaudRate(9600)
+            port.openPort()
+
+            val buffer = ByteArray(1024)
+            var bytesRead: Int
+            var str = ""
+            while (true) {
+                bytesRead = port.readBytes(buffer, buffer.size.toLong())
+                if (bytesRead > 0) {
+                    str += String(buffer, 0, bytesRead)
+                    if (str.contains("\n")) {
+                        val lines = str.split("\n")
+                        str = lines.last()
+                        lines.dropLast(1).forEach { line ->
+                            Platform.runLater {
+                                val values = line.split(",")
+                                if (values.size == 3) {
+                                    val beatValue = values[0].toDouble()
+                                    val bassValue = values[1].toDouble()
+                                    val peakValue = values[2].toDouble()
+
+                                    beatData.add(XYChart.Data(count, beatValue))
+                                    bassData.add(XYChart.Data(count, bassValue))
+                                    peakData.add(XYChart.Data(count, peakValue))
+
+                                    beatLabel.text = beatValue.toString()
+                                    bassLabel.text = bassValue.toString()
+                                    peakLabel.text = peakValue.toString()
+
+                                    count++
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        }.start()
+    }
+}
\ No newline at end of file
